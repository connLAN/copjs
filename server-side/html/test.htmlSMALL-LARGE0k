<!DOCTYPE html>
<html>
<head>
    <title>Image Gallery</title>
    <style>
        .profile-menu {
            position: relative;
            display: inline-block;
        }
        .profile-menu-content {
            display: none;
            position: absolute;
            z-index: 1;
            top: 100%;
            right: 0;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            padding: 12px 16px;
        }
        .profile-menu:hover .profile-menu-content {
            display: block;
        }
        #image-grid {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .image-container {
            width: calc(25% - 20px);
            margin: 10px;
            cursor: pointer;
        }
        .image-container img {
            max-width: 100%;
            height: auto;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.9);
        }
        .modal-content {
            margin: auto;
            display: block;
            width: 80%;
            max-width: 800px;
            max-height: 80%;
        }
        .modal-content img {
            width: 100%;
            height: auto;
        }
        .close {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 30px;
            font-weight: bold;
            color: #fff;
            cursor: pointer;
        }
        .close:hover,
        .close:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .pagination a {
            display: inline-block;
            padding: 10px;
            margin: 0 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            text-decoration: none;
            color: #333;
        }
        .pagination a.active {
            background-color: #333;
            color: #fff;
        }
        .settings-menu {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            align-items: center;
        }
        .settings-menu button {
            margin-left: 10px;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            background-color: #333;
            color: #fff;
            cursor: pointer;
        }
        .settings-menu button:hover {
            background-color: #555;
        }
        .settings-menu-content {
            display: none;
            position: absolute;
            z-index: 1;
            top: 100%;
            right: 0;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            padding: 12px 16px;
        }
        .settings-menu:hover .settings-menu-content {
            display: block;
        }
        .settings-menu-content a {
            display: block;
            padding: 5px 0;
            text-decoration: none;
            color: #333;
        }
        .settings-menu-content a:hover {
            background-color: #ddd;
        }
    </style>
</head>
<body>
    <div class="settings-menu">
        <button>Settings</button>
        <div class="settings-menu-content">
            <a href="#">User Profile</a>
            <a href="#">Wallpapers</a>
        </div>
    </div>
    <div id="image-grid"></div>
    <div id="modal" class="modal">
        <span class="close">&times;</span>
        <img class="modal-content" src="">
    </div>
    <div class="pagination"></div>
    <script>
        const imagesPerPage = 16;
        let currentPage = 1;

        // Fetch images from images.json
        fetch("images.json")
            .then(response => response.json())
            .then(images => {
                const imageGrid = document.getElementById("image-grid");
                const modal = document.getElementById("modal");
                const modalContent = document.querySelector(".modal-content");
                const closeBtn = document.querySelector(".close");
                const pagination = document.querySelector(".pagination");
                const settingsMenu = document.querySelector(".settings-menu");
                const settingsMenuContent = document.querySelector(".settings-menu-content");

                // Create image containers and add to image grid
                const renderImages = (page) => {
                    const startIndex = (page - 1) * imagesPerPage;
                    const endIndex = startIndex + imagesPerPage;
                    const pageImages = images.slice(startIndex, endIndex);
                    imageGrid.innerHTML = "";
                    pageImages.forEach(image => {
                        const imageContainer = document.createElement("div");
                        imageContainer.classList.add("image-container");
                        const smallImg = document.createElement("img");
                        smallImg.src = image.smallUrl;
                        smallImg.alt = "Image";
                        smallImg.style.width = "100%";
                        smallImg.style.height = "100%";
                        smallImg.addEventListener("click", () => {
                            // modal.style.display = "block";
                            modalContent.src = image.largeUrl;
                        });
                        const link = document.createElement("a");
                        link.href = image.largeUrl;
                        link.target = "_blank";
                        link.appendChild(smallImg);
                        imageContainer.appendChild(link);
                        imageGrid.appendChild(imageContainer);
                    });
                };

                // Render initial page
                renderImages(currentPage);

                // Create pagination links
                const totalPages = Math.ceil(images.length / imagesPerPage);
                const maxLinks = 10;
                const middleLink = Math.ceil(maxLinks / 2);
                const startLink = Math.max(currentPage - middleLink + 1, 1);
                const endLink = Math.min(startLink + maxLinks - 1, totalPages);
                const links = [];
                for (let i = startLink; i <= endLink; i++) {
                    links.push(i);
                }
                if (currentPage > middleLink) {
                    links.unshift(1);
                    if (currentPage > middleLink + 1) {
                        links.unshift("...");
                    }
                }
                if (currentPage < totalPages - middleLink + 1) {
                    if (currentPage < totalPages - middleLink) {
                        links.push("...");
                    }
                    links.push(totalPages);
                }
                pagination.innerHTML = links.map(link => {
                    const activeClass = link === currentPage ? "active" : "";
                    return `<a href="#" class="${activeClass}">${link}</a>`;
                }).join("");

                // Add click event listener to pagination links
                pagination.addEventListener("click", event => {
                    event.preventDefault();
                    const link = event.target.closest("a");
                    if (link) {
                        currentPage = parseInt(link.textContent);
                        renderImages(currentPage);
                        const links = [];
                        if (currentPage > middleLink) {
                            links.push(1);
                            if (currentPage > middleLink + 1) {
                                links.push("...");
                            }
                        }
                        const startLink = Math.max(currentPage - middleLink + 1, 1);
                        const endLink = Math.min(startLink + maxLinks - 1, totalPages);
                        for (let i = startLink; i <= endLink; i++) {
                            links.push(i);
                        }
                        if (currentPage < totalPages - middleLink + 1) {
                            if (currentPage < totalPages - middleLink) {
                                links.push("...");
                            }
                            links.push(totalPages);
                        }
                        pagination.innerHTML = links.map(link => {
                            const activeClass = link === currentPage ? "active" : "";
                            return `<a href="#" class="${activeClass}">${link}</a>`;
                        }).join("");
                    }
                });

                // Close modal when close button is clicked
                closeBtn.addEventListener("click", () => {
                    modal.style.display = "none";
                });

                // Close modal when user clicks outside of modal
                window.addEventListener("click", event => {
                    if (event.target == modal) {
                        modal.style.display = "none";
                    }
                });

                // Add click event listener to settings menu button
                settingsMenu.addEventListener("click", () => {
                    settingsMenuContent.style.display = "block";
                });

                // Close settings menu when user clicks outside of menu
                window.addEventListener("click", event => {
                    if (event.target != settingsMenu && event.target != settingsMenuContent) {
                        settingsMenuContent.style.display = "none";
                    }
                });
            }) 
            .catch(error => console.error(error));
    </script>
</body>
</html>