<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>All Courses</title>
    <style>
      /* Reset styles */
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      /* Body styles */
      body {
        font-family: Arial, sans-serif;
        font-size: 16px;
        line-height: 1.5;
        background-image: url("snow.jpg");
      }

      /* Header styles */
      header {
        background-color: #333;
        color: #fff;
        padding: 1rem;
      }

      header h1 {
        font-size: 2rem;
        margin: 0;
      }

      /* Grid styles */
      .grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        grid-gap: 2rem;
        margin: 2rem;
      }

      .grid-item {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        padding: 1rem;
      }

      .grid-item h2 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
      }

      .grid-item img {
        max-width: 100%;
        height: auto;
        margin-bottom: 0.5rem;
        cursor: pointer;
      }

      .grid-item p {
        margin-bottom: 0.5rem;
      }

      .grid-item button {
        background-color: #333;
        border: none;
        border-radius: 3px;
        color: #fff;
        cursor: pointer;
        font-size: 1rem;
        padding: 0.5rem 1rem;
        transition: background-color 0.3s ease;
      }

      .grid-item button:hover {
        background-color: #555;
      }

      /* Add new course styles */
      .add-new-course {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        margin: 2rem;
        padding: 1rem;
        text-align: center;
      }

      .add-new-course a {
        background-color: #333;
        border: none;
        border-radius: 3px;
        color: #fff;
        cursor: pointer;
        display: inline-block;
        font-size: 1rem;
        padding: 0.5rem 1rem;
        text-decoration: none;
        transition: background-color 0.3s ease;
      }

      .add-new-course a:hover {
        background-color: #555;
      }

      .new-course {
        background-color: #f5f5f5;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        margin: 2rem;
        padding: 1rem;
        text-align: center;
      }

      .new-course h2 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
      }

      .new-course form {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .new-course label {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
      }

      .new-course input[type="file"] {
        display: none;
      }

      .new-course .dropzone {
        border: 2px dashed #ccc;
        border-radius: 5px;
        padding: 2rem;
        margin-bottom: 1rem;
        cursor: pointer;
      }

      .new-course .dropzone:hover {
        background-color: #f5f5f5;
      }

      .new-course .dropzone p {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
      }

      .new-course .dropzone img {
        max-width: 100%;
        height: auto;
        margin-bottom: 0.5rem;
      }

      .new-course button {
        background-color: #333;
        border: none;
        border-radius: 3px;
        color: #fff;
        cursor: pointer;
        font-size: 1rem;
        padding: 0.5rem 1rem;
        transition: background-color 0.3s ease;
        margin-top: 1rem;
      }

      .new-course button:hover {
        background-color: #555;
      }

      .new-course .cancel-btn {
        background-color: #ccc;
        color: #333;
        margin-left: 1rem;
      }

      .new-course .cancel-btn:hover {
        background-color: #999;
      }

    </style>
  </head>
<body>
  <header>
    <h1>Add Courses</h1>
  </header>
  

  <div class="grid-item new-course">
    <h2>New Course</h2>
    <form enctype="multipart/form-data"> 
      <label for="name">Name:</label>
      <input type="text" id="name" name="name" required>

      <label for="description">Description:</label>
      <textarea id="description" name="description" required></textarea>

      <div class="grid-item dropzone">
        <p>Drag and drop an image file here or click to select a file</p>
        <input type="file" id="image" name="image" accept="image/*" required>
      </div>
      
      <div class="grid-item">
        <img id="preview" src="#" alt="Preview" style="width: 200px; height: 200px;"> 
      </div>

      <button type="submit">Create Course</button>
      <button type="button" class="cancel-btn">Cancel</button>
    </form>
  </div>

  <script>
    // get email from local storage
    const email = localStorage.getItem('email');
    if (!email) {
      alert('You must be logged in to view this page');
      location.href = '/login';
    }else{
      alert('Current user is: ' + email);
    }

    // Get the form element
    const form = document.querySelector('.new-course form');

    // Get the dropzone element
    const dropzone = document.querySelector('.dropzone');

    // Get the preview image element
    const preview = document.querySelector('#preview');
    const fileInput = document.getElementById('image');
    const image = document.getElementById('image').files[0];

    // Add a dragover event listener to the dropzone
    dropzone.addEventListener('dragover', (event) => {
      event.preventDefault();
      dropzone.classList.add('dragover');
    });

    // Add a dragleave event listener to the dropzone
    dropzone.addEventListener('dragleave', (event) => {
      event.preventDefault();
      dropzone.classList.remove('dragover');
    });

    // Add a drop event listener to the dropzone
    dropzone.addEventListener('drop', (event) => {
      event.preventDefault();
      dropzone.classList.remove('dragover');

      const file = event.dataTransfer.files[0];
      const reader = new FileReader();

      reader.addEventListener('load', () => {
        preview.src = reader.result;
      });

      reader.readAsDataURL(file);

      fileInput.files = event.dataTransfer.files;
    });

    // Add a change event listener to the file input
    fileInput.addEventListener('change', (event) => {
      const file = event.target.files[0];
      const reader = new FileReader();

      reader.addEventListener('load', () => {
        preview.src = reader.result;
      });

      reader.readAsDataURL(file);
    });

    // Add a click event listener to the dropzone
    dropzone.addEventListener('click', (event) => {
      event.preventDefault();
      fileInput.click();
    });

    // Add a drop event listener to the image
    image.addEventListener('drop', (event) => {
      event.preventDefault();
      const file = event.dataTransfer.files[0];
      const reader = new FileReader();

      reader.addEventListener('load', () => {
        image.src = reader.result;
      });

      reader.readAsDataURL(file);

      fileInput.files = event.dataTransfer.files;
    });

    // Add a change event listener to the file input
    fileInput.addEventListener('change', (event) => {
      const file = event.target.files[0];
      const reader = new FileReader();

      reader.addEventListener('load', () => {
        image.src = reader.result;
      });

      reader.readAsDataURL(file);
    });

    // Add a submit event listener to the form
    form.addEventListener('submit', (event) => {
      // Prevent the default form submission behavior
      event.preventDefault();

      const name = document.getElementById('name').value;
      const description = document.getElementById('description').value;

      const formData = new FormData();
      formData.append('name', name);
      formData.append('description', description);
      formData.append('author', email);
      formData.append('image', image);

      // Send a POST request to the server with the form data
      fetch('/addCourse', {
        method: 'POST',
        body: formData,
      })
      .then(response => {
        alert(response.status + " : " + response.statusText);
        if (response.ok) {
          // If the response is OK, reset this page
          form.reset();
          return;
        } else {
          // If the response is not OK, display an error message
          alert('Error creating course' + response.body.toString());
          return;
        }
      })
      .catch(error => {
        // If there is an error, display an error message
        alert(error);
        return;
      });

    });
  </script>

</body>
</html>